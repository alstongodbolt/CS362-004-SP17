        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:smith(int currentPlayer, struct gameState *state, int handpos);
        -:   10:adventurers(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int cardDrawn);
        -:   11:council(int currentPlayer, struct gameState *state, int handPos);
        -:   12:villages(int currentPlayer, struct gameState *state, int handPos);  
        -:   13:greats(int currentPlayer, struct gameState *state, int handPos);
        -:   14:
    #####:   15:int compare(const void* a, const void* b) {
    #####:   16:  if (*(int*)a > *(int*)b)
    #####:   17:    return 1;
    #####:   18:  if (*(int*)a < *(int*)b)
    #####:   19:    return -1;
    #####:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
    #####:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
    #####:   51:  SelectStream(1);
    #####:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
    #####:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
    #####:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
    #####:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
    #####:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
    #####:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
    #####:   80:  if (numPlayers == 2)
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
    #####:   94:  if (numPlayers == 2)
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 8;
    #####:   97:      state->supplyCount[duchy] = 8;
    #####:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
    #####:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  109:  state->supplyCount[silver] = 40;
    #####:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
    #####:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
    #####:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
    #####:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
    #####:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
    #####:  122:		  if (numPlayers == 2){ 
    #####:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
    #####:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
    #####:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
    #####:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
    #####:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
    #####:  147:      state->deckCount[i] = 0;
    #####:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
    #####:  150:	  state->deck[i][j] = estate;
    #####:  151:	  state->deckCount[i]++;
        -:  152:	}
    #####:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
    #####:  155:	  state->deck[i][j] = copper;
    #####:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
    #####:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
    #####:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
    #####:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
    #####:  173:      state->handCount[i] = 0;
    #####:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
    #####:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
    #####:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
    #####:  189:  state->outpostPlayed = 0;
    #####:  190:  state->phase = 0;
    #####:  191:  state->numActions = 1;
    #####:  192:  state->numBuys = 1;
    #####:  193:  state->playedCardCount = 0;
    #####:  194:  state->whoseTurn = 0;
    #####:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  199:  for (it = 0; it < 5; it++){
    #####:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
    #####:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
    #####:  205:  return 0;
        -:  206:}
        -:  207:
    #####:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
    #####:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
    #####:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
    #####:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
    #####:  221:  while (state->deckCount[player] > 0) {
    #####:  222:    card = floor(Random() * state->deckCount[player]);
    #####:  223:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  224:    newDeckPos++;
    #####:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
    #####:  228:    state->deckCount[player]--;
        -:  229:  }
    #####:  230:  for (i = 0; i < newDeckPos; i++) {
    #####:  231:    state->deck[player][i] = newDeck[i];
    #####:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
    #####:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
     1000:  353:int whoseTurn(struct gameState *state) {
     1000:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
    #####:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
    #####:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
    #####:  540:    for (i = 0; i < state->discardCount[player];i++){
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
    #####:  545:    state->deckCount[player] = state->discardCount[player];
    #####:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
    #####:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
    #####:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
    #####:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
    #####:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
    #####:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
    #####:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
    #####:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  583:    state->deckCount[player]--;
    #####:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
    #####:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        -:  653:
        -:  654:/*************************************************************************************************************************************************
        -:  655:((((((((((((_____________________*****************************************************************************************************************/
    #####:  656:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  657:{
        -:  658:  int i;
        -:  659:  int j;
        -:  660:  int k;
        -:  661:  int x;
        -:  662:  int index;
    #####:  663:  int currentPlayer = whoseTurn(state);
    #####:  664:  int nextPlayer = currentPlayer + 1;
        -:  665:
    #####:  666:  int tributeRevealedCards[2] = {-1, -1};
        -:  667:  int temphand[MAX_HAND];// moved above the if statement
    #####:  668:  int drawntreasure=0;
        -:  669:  int cardDrawn;
    #####:  670:  int z = 0;// this is the counter for the temp hand
    #####:  671:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  672:    nextPlayer = 0;
        -:  673:  }
        -:  674:  
        -:  675:	
        -:  676:  //uses switch to select card and perform actions
        -:  677: // printf("%sd\n", card);
    #####:  678:  switch( card ) 
        -:  679:    {
        -:  680:
        -:  681:
        -:  682:
        -:  683:
        -:  684:
        -:  685:
        -:  686:      //adventurer(int drawntreasure, struct gameState *state, int currentPlayer);
        -:  687:    case adventurer:
    #####:  688:        adventurers(drawntreasure, state, currentPlayer, *temphand, cardDrawn);
        -:  689:
        -:  690:
        -:  691:
        -:  692:
        -:  693:
        -:  694:
        -:  695:    //    council(int currentPlayer, struct gameState *state);
        -:  696:    case council_room:
    #####:  697:        council(currentPlayer, state, handPos);
        -:  698:
        -:  699:
        -:  700:
        -:  701:
        -:  702:
        -:  703:
        -:  704:    case feast:
        -:  705:      //gain card with cost up to 5
        -:  706:      //Backup hand
    #####:  707:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  708:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  709:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  710:      }
        -:  711:      //Backup hand
        -:  712:
        -:  713:      //Update Coins for Buy
    #####:  714:      updateCoins(currentPlayer, state, 5);
    #####:  715:      x = 1;//Condition to loop on
    #####:  716:      while( x == 1) {//Buy one card
    #####:  717:	if (supplyCount(choice1, state) <= 0){
        -:  718:	  if (DEBUG)
        -:  719:	    printf("None of that card left, sorry!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  723:	  }
        -:  724:	}
    #####:  725:	else if (state->coins < getCost(choice1)){
    #####:  726:	  printf("That card is too expensive!\n");
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  730:	  }
        -:  731:	}
        -:  732:	else{
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
    #####:  738:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  739:	  x = 0;//No more buying cards
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:	  }
        -:  744:
        -:  745:	}
        -:  746:      }     
        -:  747:
        -:  748:      //Reset Hand
    #####:  749:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  750:	state->hand[currentPlayer][i] = temphand[i];
    #####:  751:	temphand[i] = -1;
        -:  752:      }
        -:  753:      //Reset Hand
        -:  754:      			
    #####:  755:      return 0;
        -:  756:			
        -:  757:    case gardens:
    #####:  758:      return -1;
        -:  759:			
        -:  760:    case mine:
    #####:  761:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  762:
    #####:  763:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  764:	{
    #####:  765:	  return -1;
        -:  766:	}
        -:  767:		
    #####:  768:      if (choice2 > treasure_map || choice2 < curse)
        -:  769:	{
    #####:  770:	  return -1;
        -:  771:	}
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 2, currentPlayer);
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:			
    #####:  793:      return 0;
        -:  794:			
        -:  795:    case remodel:
    #####:  796:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  797:
    #####:  798:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  799:	{
    #####:  800:	  return -1;
        -:  801:	}
        -:  802:
    #####:  803:      gainCard(choice2, state, 0, currentPlayer);
        -:  804:
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
        -:  807:
        -:  808:      //discard trashed card
    #####:  809:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  810:	{
    #####:  811:	  if (state->hand[currentPlayer][i] == j)
        -:  812:	    {
    #####:  813:	      discardCard(i, currentPlayer, state, 0);			
    #####:  814:	      break;
        -:  815:	    }
        -:  816:	}
        -:  817:
        -:  818:
    #####:  819:      return 0;
        -:  820:		/***********************************************************************************************/
        -:  821:     case smithy:
        -:  822:       //+3 Cards
        -:  823:
    #####:  824:     smith(currentPlayer, state, handPos);
        -:  825:
        -:  826:
        -:  827:                     
        -:  828:// village(int currentPlayer, struct gameState *, int handPos);   		
        -:  829:     case village:
        -:  830:       //+1 Card
        -:  831:
    #####:  832:     villages(currentPlayer, state, handPos);
        -:  833:
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:
        -:  841:
        -:  842:
        -:  843:
        -:  844:
        -:  845:
        -:  846:
        -:  847:
        -:  848:
        -:  849:    case baron:
    #####:  850:      state->numBuys++;//Increase buys by 1!
    #####:  851:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  852:	int p = 0;//Iterator for hand!
    #####:  853:	int card_not_discarded = 1;//Flag for discard set!
    #####:  854:	while(card_not_discarded){
    #####:  855:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  856:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  857:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  858:	    state->discardCount[currentPlayer]++;
    #####:  859:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  860:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  861:	    }
    #####:  862:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  863:	    state->handCount[currentPlayer]--;
    #####:  864:	    card_not_discarded = 0;//Exit the loop
        -:  865:	  }
    #####:  866:	  else if (p > state->handCount[currentPlayer]){
        -:  867:	    if(DEBUG) {
        -:  868:	      printf("No estate cards in your hand, invalid choice\n");
        -:  869:	      printf("Must gain an estate if there are any\n");
        -:  870:	    }
    #####:  871:	    if (supplyCount(estate, state) > 0){
    #####:  872:	      gainCard(estate, state, 0, currentPlayer);
    #####:  873:	      state->supplyCount[estate]--;//Decrement estates
    #####:  874:	      if (supplyCount(estate, state) == 0){
    #####:  875:		isGameOver(state);
        -:  876:	      }
        -:  877:	    }
    #####:  878:	    card_not_discarded = 0;//Exit the loop
        -:  879:	  }
        -:  880:			    
        -:  881:	  else{
    #####:  882:	    p++;//Next card
        -:  883:	  }
        -:  884:	}
        -:  885:      }
        -:  886:			    
        -:  887:      else{
    #####:  888:	if (supplyCount(estate, state) > 0){
    #####:  889:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  890:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  891:	  if (supplyCount(estate, state) == 0){
    #####:  892:	    isGameOver(state);
        -:  893:	  }
        -:  894:	}
        -:  895:      }
        -:  896:	    
        -:  897:      
    #####:  898:      return 0;
        -:  899:		////////////////////////////////////////////////////////////////////////////////////////
        -:  900:    case great_hall:
        -:  901:      //+1 Card
    #####:  902:         greats(currentPlayer,state,handPos);
        -:  903:
        -:  904:		
        -:  905:    case minion:
        -:  906:      //+1 action
    #####:  907:      state->numActions++;
        -:  908:			
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
        -:  911:			
    #####:  912:      if (choice1)		//+2 coins
        -:  913:	{
    #####:  914:	  state->coins = state->coins + 2;
        -:  915:	}
        -:  916:			
    #####:  917:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  918:	{
        -:  919:	  //discard hand
    #####:  920:	  while(numHandCards(state) > 0)
        -:  921:	    {
    #####:  922:	      discardCard(handPos, currentPlayer, state, 0);
        -:  923:	    }
        -:  924:				
        -:  925:	  //draw 4
    #####:  926:	  for (i = 0; i < 4; i++)
        -:  927:	    {
    #####:  928:	      drawCard(currentPlayer, state);
        -:  929:	    }
        -:  930:				
        -:  931:	  //other players discard hand and redraw if hand size > 4
    #####:  932:	  for (i = 0; i < state->numPlayers; i++)
        -:  933:	    {
    #####:  934:	      if (i != currentPlayer)
        -:  935:		{
    #####:  936:		  if ( state->handCount[i] > 4 )
        -:  937:		    {
        -:  938:		      //discard hand
    #####:  939:		      while( state->handCount[i] > 0 )
        -:  940:			{
    #####:  941:			  discardCard(handPos, i, state, 0);
        -:  942:			}
        -:  943:							
        -:  944:		      //draw 4
    #####:  945:		      for (j = 0; j < 4; j++)
        -:  946:			{
    #####:  947:			  drawCard(i, state);
        -:  948:			}
        -:  949:		    }
        -:  950:		}
        -:  951:	    }
        -:  952:				
        -:  953:	}
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case steward:
    #####:  957:      if (choice1 == 1)
        -:  958:	{
        -:  959:	  //+2 cards
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
    #####:  963:      else if (choice1 == 2)
        -:  964:	{
        -:  965:	  //+2 coins
    #####:  966:	  state->coins = state->coins + 2;
        -:  967:	}
        -:  968:      else
        -:  969:	{
        -:  970:	  //trash 2 cards in hand
    #####:  971:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  972:	  discardCard(choice3, currentPlayer, state, 1);
        -:  973:	}
        -:  974:			
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
    #####:  977:      return 0;
        -:  978:		
        -:  979:    case tribute:
    #####:  980:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  981:	if (state->deckCount[nextPlayer] > 0){
    #####:  982:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  983:	  state->deckCount[nextPlayer]--;
        -:  984:	}
    #####:  985:	else if (state->discardCount[nextPlayer] > 0){
    #####:  986:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  987:	  state->discardCount[nextPlayer]--;
        -:  988:	}
        -:  989:	else{
        -:  990:	  //No Card to Reveal
        -:  991:	  if (DEBUG){
        -:  992:	    printf("No cards to reveal\n");
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:	    
        -:  997:      else{
    #####:  998:	if (state->deckCount[nextPlayer] == 0){
    #####:  999:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1000:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1001:	    state->deckCount[nextPlayer]++;
    #####: 1002:	    state->discard[nextPlayer][i] = -1;
    #####: 1003:	    state->discardCount[nextPlayer]--;
        -: 1004:	  }
        -: 1005:			    
    #####: 1006:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1007:	} 
    #####: 1008:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1009:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1010:	state->deckCount[nextPlayer]--;
    #####: 1011:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1012:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1013:	state->deckCount[nextPlayer]--;
        -: 1014:      }    
        -: 1015:		       
    #####: 1016:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1017:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1018:	state->playedCardCount++;
    #####: 1019:	tributeRevealedCards[1] = -1;
        -: 1020:      }
        -: 1021:
    #####: 1022:      for (i = 0; i <= 2; i ++){
    #####: 1023:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1024:	  state->coins += 2;
        -: 1025:	}
        -: 1026:		    
    #####: 1027:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1028:	  drawCard(currentPlayer, state);
    #####: 1029:	  drawCard(currentPlayer, state);
        -: 1030:	}
        -: 1031:	else{//Action Card
    #####: 1032:	  state->numActions = state->numActions + 2;
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case ambassador:
    #####: 1039:      j = 0;		//used to check if player has enough cards to discard
        -: 1040:
    #####: 1041:      if (choice2 > 2 || choice2 < 0)
        -: 1042:	{
    #####: 1043:	  return -1;				
        -: 1044:	}
        -: 1045:
    #####: 1046:      if (choice1 == handPos)
        -: 1047:	{
    #####: 1048:	  return -1;
        -: 1049:	}
        -: 1050:
    #####: 1051:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1052:	{
    #####: 1053:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1054:	    {
    #####: 1055:	      j++;
        -: 1056:	    }
        -: 1057:	}
    #####: 1058:      if (j < choice2)
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
        -: 1063:      if (DEBUG) 
        -: 1064:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1065:
        -: 1066:      //increase supply count for choosen card by amount being discarded
    #####: 1067:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1068:			
        -: 1069:      //each other player gains a copy of revealed card
    #####: 1070:      for (i = 0; i < state->numPlayers; i++)
        -: 1071:	{
    #####: 1072:	  if (i != currentPlayer)
        -: 1073:	    {
    #####: 1074:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1075:	    }
        -: 1076:	}
        -: 1077:
        -: 1078:      //discard played card from hand
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1080:
        -: 1081:      //trash copies of cards returned to supply
    #####: 1082:      for (j = 0; j < choice2; j++)
        -: 1083:	{
    #####: 1084:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1085:	    {
    #####: 1086:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1087:		{
    #####: 1088:		  discardCard(i, currentPlayer, state, 1);
    #####: 1089:		  break;
        -: 1090:		}
        -: 1091:	    }
        -: 1092:	}			
        -: 1093:
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case cutpurse:
        -: 1097:
    #####: 1098:      updateCoins(currentPlayer, state, 2);
    #####: 1099:      for (i = 0; i < state->numPlayers; i++)
        -: 1100:	{
    #####: 1101:	  if (i != currentPlayer)
        -: 1102:	    {
    #####: 1103:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1104:		{
    #####: 1105:		  if (state->hand[i][j] == copper)
        -: 1106:		    {
    #####: 1107:		      discardCard(j, i, state, 0);
    #####: 1108:		      break;
        -: 1109:		    }
    #####: 1110:		  if (j == state->handCount[i])
        -: 1111:		    {
    #####: 1112:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1113:			{
        -: 1114:			  if (DEBUG)
        -: 1115:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1116:			}	
    #####: 1117:		      break;
        -: 1118:		    }		
        -: 1119:		}
        -: 1120:					
        -: 1121:	    }
        -: 1122:				
        -: 1123:	}				
        -: 1124:
        -: 1125:      //discard played card from hand
    #####: 1126:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:		
        -: 1131:    case embargo: 
        -: 1132:      //+2 Coins
    #####: 1133:      state->coins = state->coins + 2;
        -: 1134:			
        -: 1135:      //see if selected pile is in play
    #####: 1136:      if ( state->supplyCount[choice1] == -1 )
        -: 1137:	{
    #####: 1138:	  return -1;
        -: 1139:	}
        -: 1140:			
        -: 1141:      //add embargo token to selected supply pile
    #####: 1142:      state->embargoTokens[choice1]++;
        -: 1143:			
        -: 1144:      //trash card
    #####: 1145:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case outpost:
        -: 1149:      //set outpost flag
    #####: 1150:      state->outpostPlayed++;
        -: 1151:			
        -: 1152:      //discard card
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1154:      return 0;
        -: 1155:		
        -: 1156:    case salvager:
        -: 1157:      //+1 buy
    #####: 1158:      state->numBuys++;
        -: 1159:			
    #####: 1160:      if (choice1)
        -: 1161:	{
        -: 1162:	  //gain coins equal to trashed card
    #####: 1163:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1164:	  //trash card
    #####: 1165:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1166:	}
        -: 1167:			
        -: 1168:      //discard card
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1170:      return 0;
        -: 1171:		
        -: 1172:    case sea_hag:
    #####: 1173:      for (i = 0; i < state->numPlayers; i++){
    #####: 1174:	if (i != currentPlayer){
    #####: 1175:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1176:	  state->discardCount[i]++;
    #####: 1177:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1178:	}
        -: 1179:      }
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case treasure_map:
        -: 1183:      //search hand for another treasure_map
    #####: 1184:      index = -1;
    #####: 1185:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1186:    	{
    #####: 1187:    	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1188:    	    {
    #####: 1189:    	      index = i;
    #####: 1190:    	      break;
        -: 1191:    	    }
        -: 1192:    	}
    #####: 1193:          if (index > -1)
        -: 1194:    	{
        -: 1195:    	  //trash both treasure cards
    #####: 1196:    	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1197:    	  discardCard(index, currentPlayer, state, 1);
        -: 1198:
        -: 1199:    	  //gain 4 Gold cards
    #####: 1200:    	  for (i = 0; i < 4; i++)
        -: 1201:    	    {
    #####: 1202:    	      gainCard(gold, state, 1, currentPlayer);
        -: 1203:    	    }
        -: 1204:    				
        -: 1205:    	  //return success
    #####: 1206:    	  return 1;
        -: 1207:    	}
        -: 1208:
        -: 1209:/***********************************************************************************************/
        -: 1210:
        -: 1211:
        -: 1212:
        -: 1213:
        -: 1214:      // if(card == "smithy")
        -: 1215:      // {
        -: 1216:      //                         for (i = 0; i < 3; i++)
        -: 1217:      //                     {
        -: 1218:      //                       drawCard(currentPlayer, state);
        -: 1219:      //                     }
        -: 1220:                              
        -: 1221:      //                         //discard card from hand
        -: 1222:      //                         discardCard(handPos, currentPlayer, state, 0);
        -: 1223:      //                         return 0;
        -: 1224:                            
        -: 1225:      //                       case village:
        -: 1226:      //                         //+1 Card
        -: 1227:      //                         drawCard(currentPlayer, state);
        -: 1228:                              
        -: 1229:      //                         //+2 Actions
        -: 1230:      //                         state->numActions = state->numActions + 2;
        -: 1231:                              
        -: 1232:      //                         //discard played card from hand
        -: 1233:      //                         discardCard(handPos, currentPlayer, state, 0);
        -: 1234:      //                         return 0;
        -: 1235:      // }
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
    #####: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
    #####: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
    #####: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
    #####: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
    #####: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
    #####: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
    #####: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
    #####: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
    #####: 1279:  return 0;
        -: 1280:}
        -: 1281:
    #####: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
    #####: 1297:  if (toFlag == 1)
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
    #####: 1302:  else if (toFlag == 2)
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
    #####: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
    #####: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
    #####: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
    #####: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
    #####: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
    #####: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
    #####: 1331:	  state->coins += 1;
        -: 1332:	}
    #####: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
    #####: 1335:	  state->coins += 2;
        -: 1336:	}
    #####: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
    #####: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
    #####: 1344:  state->coins += bonus;
        -: 1345:
    #####: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
    #####: 1352:smith(int currentPlayer, struct gameState *state, int handPos)
        -: 1353:       {
        -: 1354:        int i;
    #####: 1355:        for (i = 0; i <= 3; i++){
    #####: 1356:            drawCard(currentPlayer, state);
        -: 1357:          }
        -: 1358:        
        -: 1359:         //discard card from hand
    #####: 1360:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1361:        return 0;
        -: 1362:      }
        -: 1363:
        -: 1364:
    #####: 1365:  adventurers(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int cardDrawn){
    #####: 1366:      int z = 0;
    #####: 1367:      while(drawntreasure<2){
    #####: 1368:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -: 1369:      //    shuffle(currentPlayer, state);
        -: 1370:        }
    #####: 1371:        drawCard(currentPlayer, state);
    #####: 1372:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1373:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1374:          drawntreasure++;
        -: 1375:        else{
    #####: 1376:          temphand[z]=cardDrawn;
    #####: 1377:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1378:          z++;
        -: 1379:        }
        -: 1380:            }
    #####: 1381:            while(z-1>=0){
    #####: 1382:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1383:        z=z-1;
        -: 1384:            }
    #####: 1385:      return 0;
        -: 1386:
        -: 1387:}
        -: 1388:      /// No bugs
    #####: 1389:      council(int currentPlayer, struct gameState *state, int handPos){
        -: 1390:        int i;
    #####: 1391:                  for (i = 0; i < 3; i++)
        -: 1392:              {
    #####: 1393:                drawCard(currentPlayer, state);
        -: 1394:              }
        -: 1395:                  
        -: 1396:                  //+1 Buy
    #####: 1397:                  state->numBuys++;
        -: 1398:                  
        -: 1399:                  //Each other player draws a card
    #####: 1400:                  for (i = 0; i < state->numPlayers; i++)
        -: 1401:              {
    #####: 1402:                if ( i != currentPlayer )
        -: 1403:                  {
    #####: 1404:                    drawCard(i, state);
        -: 1405:                  }
        -: 1406:              }
        -: 1407:                  
        -: 1408:                  //put played card in played card pile
    #####: 1409:                  discardCard(handPos, currentPlayer, state, 0);
        -: 1410:                  
    #####: 1411:                  return 0;
        -: 1412:      }
        -: 1413:
        -: 1414:
    #####: 1415:     villages(int currentPlayer, struct gameState *state, int handPos){
    #####: 1416:           drawCard(currentPlayer, state);
        -: 1417:          
        -: 1418:           //+2 Actions
    #####: 1419:           state->numActions = state->numActions + 2;        
        -: 1420:           //discard played card from hand
        -: 1421:        //   discardCard(handPos, currentPlayer, state, 0);
    #####: 1422:           return 0;
        -: 1423:
        -: 1424:      }
        -: 1425:
    #####: 1426:      greats(int currentPlayer, struct gameState *state, int handPos){
    #####: 1427:          drawCard(currentPlayer, state);
        -: 1428:          
        -: 1429:          //+1 Actions
    #####: 1430:          state->numActions++;
        -: 1431:          
        -: 1432:          //discard card from hand
    #####: 1433:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1434:          return 0;
        -: 1435:    }
